@page "/FolderView/"
@page "/FolderView/{folderId:int?}"
@using Microsoft.EntityFrameworkCore.Diagnostics.Internal
@using Microsoft.EntityFrameworkCore.Diagnostics
@using System.Linq.Expressions

<MudStack Spacing="4" Style="margin-top: 2rem;">
    <MudGrid>
        <MudItem xs="9">
            @*<h1>
                <span>/ </span>
                @foreach(var segment in Path)
                {
                    <span>
                        <a href="@segment.Link">
                            @segment.Name
                        </a>
                    </span>
                }
            </h1>*@
        </MudItem>
        <MudItem xs="3">
            <MudSelect T="string" @bind-Value="sortMethod" OpenIcon="@Icons.Material.Filled.Sort" Margin="Margin.Dense" Label="Sort" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                <MudSelectItem Value="@("Alphabetically")"/>
                <MudSelectItem Value="@("Last Created")"/>
            </MudSelect>
        </MudItem>
    </MudGrid>
    @if (Folders is {Count: > 0 })
    {
        <h3>@(Folders.Count == 1 ? "Folder" : "Folders")</h3>
        <MudCarousel TData="object" Style="height: 200px; width: 120%; transform: translateX(-8.33%)" ShowArrows="true" ShowBullets="true" EnableSwipeGesture="true" AutoCycle="false">
            @foreach (var folderpage in FolderCarousel)
            {
                <MudCarouselItem>
                    <MudGrid Style="width: 83.33%; margin: auto;">
                        @foreach (var folder in folderpage)
                        {
                            <MudItem xs="4">
                                <MudCard Elevation="3" @onclick="() => GoToFolder(folder.Id)" Style="cursor: pointer;">
                                    <MudCardContent>
                                        <MudText>@folder.Name</MudText>
                                    </MudCardContent>
                                </MudCard>
                            </MudItem>
                        }
                    </MudGrid>
                </MudCarouselItem>
            }
        </MudCarousel>

        <div style="margin-bottom: 3rem;"></div>
    }
    @if (StudySets is {Count: > 0 })
    {
        <h3>@(StudySets.Count == 1 ? "Study Set" : "Study Sets")</h3>
        @foreach (var studySet in StudySets)
        {
            <a>
                <MudCard Elevation="3">
                    <MudCardContent>
                        <MudText>@studySet.Name</MudText>
                    </MudCardContent>
                </MudCard>
            </a>
        }
    }
</MudStack>

@code {

    string _sortMethod;

    string sortMethod
    {
        get => _sortMethod;
        set
        {
            _sortMethod = value;
            if (Folders == null) return;
            switch (sortMethod)
            {
                case "Last Created":
                    Folders.Sort((f1, f2) => f2.CreatedAt.CompareTo(f1.CreatedAt));
                    break;
                case "Alphabetically":
                default:
                    Folders.Sort((f1, f2) => f1.Name.CompareTo(f2.Name));
                    break;
            }
        }
    }

    [Parameter]
    public int? FolderId { get; set; }

    List<Folder>? Folders { get; set; }

    List<List<Folder>>? FolderCarousel
    {
        get
        {
            List<List<Folder>> _foldersList = new List<List<Folder>>();
            @for (int i = 0; i < Convert.ToInt32(Math.Floor((decimal)(Folders.Count / 6))) + 1; i++)
            {
                _foldersList.Add(new List<Folder>());
                @for (int j = i * 6; j < i * 6 + 6 && j < Folders.Count; j++)
                {
                    _foldersList[i].Add(Folders[j]);
                }
            }
            return _foldersList;
        }
    }

    void GoToFolder(int folderId)
    {
        NavigationManager.NavigateTo($"/folderview/{folderId}");
    }

    List<StudySet>? StudySets { get; set; }

    Path Path { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (FolderId.HasValue)
        {
            Folders = await FolderRepository.ReadAsync(f => f.ParentFolderId == FolderId.Value);
            StudySets = await StudySetRepository.ReadAsync(s => s.FolderId == FolderId);
        }
        else
        {
            Folders = await FolderRepository.ReadAsync(f => f.ParentFolderId == null);
        }
        sortMethod = "Alphabetically";
        StateHasChanged();
    }

}